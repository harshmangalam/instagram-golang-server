// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "image", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_posts", Type: field.TypeInt, Nullable: true},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_users_posts",
				Columns:    []*schema.Column{PostsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "password", Type: field.TypeString},
		{Name: "bio", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "profile_pic", Type: field.TypeString, Nullable: true},
		{Name: "gender", Type: field.TypeEnum, Enums: []string{"male", "female", "custom", "not_prefer"}, Default: "male"},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "admin"}, Default: "user"},
		{Name: "is_active", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PostLikesColumns holds the columns for the "post_likes" table.
	PostLikesColumns = []*schema.Column{
		{Name: "post_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// PostLikesTable holds the schema information for the "post_likes" table.
	PostLikesTable = &schema.Table{
		Name:       "post_likes",
		Columns:    PostLikesColumns,
		PrimaryKey: []*schema.Column{PostLikesColumns[0], PostLikesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "post_likes_post_id",
				Columns:    []*schema.Column{PostLikesColumns[0]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "post_likes_user_id",
				Columns:    []*schema.Column{PostLikesColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFollowingsColumns holds the columns for the "user_followings" table.
	UserFollowingsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "follower_id", Type: field.TypeInt},
	}
	// UserFollowingsTable holds the schema information for the "user_followings" table.
	UserFollowingsTable = &schema.Table{
		Name:       "user_followings",
		Columns:    UserFollowingsColumns,
		PrimaryKey: []*schema.Column{UserFollowingsColumns[0], UserFollowingsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_followings_user_id",
				Columns:    []*schema.Column{UserFollowingsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_followings_follower_id",
				Columns:    []*schema.Column{UserFollowingsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		PostsTable,
		UsersTable,
		PostLikesTable,
		UserFollowingsTable,
	}
)

func init() {
	PostsTable.ForeignKeys[0].RefTable = UsersTable
	PostLikesTable.ForeignKeys[0].RefTable = PostsTable
	PostLikesTable.ForeignKeys[1].RefTable = UsersTable
	UserFollowingsTable.ForeignKeys[0].RefTable = UsersTable
	UserFollowingsTable.ForeignKeys[1].RefTable = UsersTable
}
